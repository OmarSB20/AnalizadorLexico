
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 05 09:23:44 CST 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 05 09:23:44 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\002\012\000\002\007" +
    "\005\000\002\007\004\000\002\013\004\000\002\013\003" +
    "\000\002\013\004\000\002\013\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\004\005\000\002\010\006\000\002\010\004\000\002" +
    "\010\002\000\002\006\007\000\002\006\007\000\002\021" +
    "\011\000\002\021\007\000\002\011\006\000\002\011\006" +
    "\000\002\011\006\000\002\011\006\000\002\011\004\000" +
    "\002\011\002\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\005\012\000\002\012\006" +
    "\000\002\017\005\000\002\017\005\000\002\014\012\000" +
    "\002\015\011\000\002\016\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\004\012\004\001\002\000\004\010\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\040\010\001\002\000\004\030\011\001\002\000" +
    "\006\005\uffe8\010\uffe8\001\002\000\004\040\157\001\002" +
    "\000\006\005\147\010\150\001\002\000\010\005\uffe8\010" +
    "\uffe8\013\015\001\002\000\022\010\035\015\021\016\024" +
    "\017\031\020\026\025\023\027\037\032\027\001\002\000" +
    "\004\040\017\001\002\000\010\005\uffff\010\uffff\013\uffff" +
    "\001\002\000\024\010\ufff0\014\ufff0\015\ufff0\016\ufff0\017" +
    "\ufff0\020\ufff0\025\ufff0\027\ufff0\032\ufff0\001\002\000\004" +
    "\013\144\001\002\000\024\010\ufff4\014\ufff4\015\ufff4\016" +
    "\ufff4\017\ufff4\020\ufff4\025\ufff4\027\ufff4\032\ufff4\001\002" +
    "\000\004\041\135\001\002\000\004\041\122\001\002\000" +
    "\024\010\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee" +
    "\025\uffee\027\uffee\032\uffee\001\002\000\004\013\113\001" +
    "\002\000\004\041\107\001\002\000\024\010\ufff8\014\ufff8" +
    "\015\ufff8\016\ufff8\017\ufff8\020\ufff8\025\ufff8\027\ufff8\032" +
    "\ufff8\001\002\000\004\041\103\001\002\000\024\010\035" +
    "\014\076\015\021\016\024\017\031\020\026\025\023\027" +
    "\037\032\027\001\002\000\024\010\ufff6\014\ufff6\015\ufff6" +
    "\016\ufff6\017\ufff6\020\ufff6\025\ufff6\027\ufff6\032\ufff6\001" +
    "\002\000\024\010\uffec\014\uffec\015\uffec\016\uffec\017\uffec" +
    "\020\uffec\025\uffec\027\uffec\032\uffec\001\002\000\004\005" +
    "\046\001\002\000\024\010\ufff2\014\ufff2\015\ufff2\016\ufff2" +
    "\017\ufff2\020\ufff2\025\ufff2\027\ufff2\032\ufff2\001\002\000" +
    "\004\041\040\001\002\000\004\010\041\001\002\000\004" +
    "\037\042\001\002\000\004\010\043\001\002\000\004\042" +
    "\044\001\002\000\004\040\045\001\002\000\024\010\uffd1" +
    "\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\025\uffd1\027" +
    "\uffd1\032\uffd1\001\002\000\004\037\047\001\002\000\022" +
    "\010\uffde\011\uffde\033\uffde\034\uffde\035\uffde\036\uffde\040" +
    "\uffde\041\050\001\002\000\020\010\uffde\011\uffde\033\uffde" +
    "\034\uffde\035\uffde\036\uffde\042\uffde\001\002\000\020\010" +
    "\060\011\052\033\056\034\057\035\061\036\053\040\055" +
    "\001\002\000\012\033\056\034\057\035\061\036\053\001" +
    "\002\000\022\010\uffda\011\uffda\033\uffda\034\uffda\035\uffda" +
    "\036\uffda\040\uffda\042\uffda\001\002\000\022\010\uffdf\011" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\040\uffdf\042\uffdf" +
    "\001\002\000\024\010\uffe4\014\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\025\uffe4\027\uffe4\032\uffe4\001\002\000\022" +
    "\010\uffdc\011\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\040" +
    "\uffdc\042\uffdc\001\002\000\022\010\uffdd\011\uffdd\033\uffdd" +
    "\034\uffdd\035\uffdd\036\uffdd\040\uffdd\042\uffdd\001\002\000" +
    "\012\033\056\034\057\035\061\036\053\001\002\000\022" +
    "\010\uffdb\011\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\040" +
    "\uffdb\042\uffdb\001\002\000\006\010\064\011\063\001\002" +
    "\000\022\010\uffe2\011\uffe2\033\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\040\uffe2\042\uffe2\001\002\000\022\010\uffe3\011\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\036\uffe3\040\uffe3\042\uffe3\001" +
    "\002\000\006\010\067\011\066\001\002\000\022\010\uffe0" +
    "\011\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\040\uffe0\042" +
    "\uffe0\001\002\000\022\010\uffe1\011\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\036\uffe1\040\uffe1\042\uffe1\001\002\000\020\010" +
    "\060\011\052\033\056\034\057\035\061\036\053\042\071" +
    "\001\002\000\004\040\072\001\002\000\024\010\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\025\uffe5\027\uffe5" +
    "\032\uffe5\001\002\000\024\010\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\025\ufff5\027\ufff5\032\ufff5\001\002" +
    "\000\024\010\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020" +
    "\ufff1\025\ufff1\027\ufff1\032\ufff1\001\002\000\024\010\uffef" +
    "\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\025\uffef\027" +
    "\uffef\032\uffef\001\002\000\004\002\000\001\002\000\024" +
    "\010\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\025" +
    "\ufff9\027\ufff9\032\ufff9\001\002\000\024\010\uffed\014\uffed" +
    "\015\uffed\016\uffed\017\uffed\020\uffed\025\uffed\027\uffed\032" +
    "\uffed\001\002\000\024\010\ufff7\014\ufff7\015\ufff7\016\ufff7" +
    "\017\ufff7\020\ufff7\025\ufff7\027\ufff7\032\ufff7\001\002\000" +
    "\024\010\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3" +
    "\025\ufff3\027\ufff3\032\ufff3\001\002\000\004\010\104\001" +
    "\002\000\004\042\105\001\002\000\004\040\106\001\002" +
    "\000\024\010\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\025\uffe7\027\uffe7\032\uffe7\001\002\000\004\010\110" +
    "\001\002\000\004\042\111\001\002\000\004\040\112\001" +
    "\002\000\024\010\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\025\uffe6\027\uffe6\032\uffe6\001\002\000\010\010" +
    "\035\017\031\032\027\001\002\000\012\010\ufffc\014\ufffc" +
    "\017\ufffc\032\ufffc\001\002\000\012\010\035\014\121\017" +
    "\031\032\027\001\002\000\012\010\ufffa\014\ufffa\017\ufffa" +
    "\032\ufffa\001\002\000\012\010\ufffd\014\ufffd\017\ufffd\032" +
    "\ufffd\001\002\000\012\010\ufffb\014\ufffb\017\ufffb\032\ufffb" +
    "\001\002\000\024\010\uffd0\014\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\020\uffd0\025\uffd0\027\uffd0\032\uffd0\001\002\000\004" +
    "\010\124\001\002\000\004\042\130\001\002\000\004\004" +
    "\125\001\002\000\006\010\127\011\126\001\002\000\004" +
    "\042\uffd4\001\002\000\004\042\uffd3\001\002\000\004\024" +
    "\131\001\002\000\004\013\132\001\002\000\010\010\035" +
    "\017\031\032\027\001\002\000\012\010\035\014\134\017" +
    "\031\032\027\001\002\000\024\010\uffd6\014\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\025\uffd6\027\uffd6\032\uffd6\001" +
    "\002\000\004\010\124\001\002\000\004\042\137\001\002" +
    "\000\004\026\140\001\002\000\004\013\141\001\002\000" +
    "\010\010\035\017\031\032\027\001\002\000\012\010\035" +
    "\014\143\017\031\032\027\001\002\000\024\010\uffd2\014" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\025\uffd2\027\uffd2" +
    "\032\uffd2\001\002\000\010\010\035\017\031\032\027\001" +
    "\002\000\012\010\035\014\146\017\031\032\027\001\002" +
    "\000\024\010\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020" +
    "\uffd5\025\uffd5\027\uffd5\032\uffd5\001\002\000\010\021\156" +
    "\022\154\023\155\001\002\000\010\005\uffe9\007\151\010" +
    "\uffe9\001\002\000\004\010\152\001\002\000\006\005\uffea" +
    "\010\uffea\001\002\000\004\040\uffeb\001\002\000\004\040" +
    "\uffd8\001\002\000\004\040\uffd9\001\002\000\004\040\uffd7" +
    "\001\002\000\010\005\ufffe\010\ufffe\013\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\011\007\013\010\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\015\010\012" +
    "\001\001\000\022\003\031\005\027\006\033\012\032\014" +
    "\021\015\035\016\017\021\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\076\006\077\012\100" +
    "\014\072\015\101\016\073\021\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\050\001\001\000" +
    "\004\011\067\001\001\000\004\023\053\001\001\000\004" +
    "\023\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\113\013\114\021" +
    "\115\001\001\000\002\001\001\000\006\006\116\021\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\113\013\132\021\115\001\001\000\006\006" +
    "\116\021\117\001\001\000\002\001\001\000\004\017\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\113\013\141\021\115\001\001\000\006" +
    "\006\116\021\117\001\001\000\002\001\001\000\010\006" +
    "\113\013\144\021\115\001\001\000\006\006\116\021\117" +
    "\001\001\000\002\001\001\000\004\020\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // REPEAT ::= Repeat Begin FUNCION End 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPEAT",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // UNTIL ::= Until Parentesis_a Identificador Igual Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNTIL",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Do Begin FUNCION End 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELSE ::= Else Begin FUNCION End 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Then Begin FUNCION End 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TD ::= T_datoS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TD",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TD ::= T_datoN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TD",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TD ::= T_datoB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TD",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERADORES_A ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_A",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERADORES_A ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_A",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERADORES_A ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_A",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERADORES_A ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_A",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CUERPO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CUERPO ::= CUERPO OPERADORES_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CUERPO ::= CUERPO Numero OPERADORES_A Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CUERPO ::= CUERPO Numero OPERADORES_A Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUERPO ::= CUERPO Identificador OPERADORES_A Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPO ::= CUERPO Identificador OPERADORES_A Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERACION ::= Identificador Asignacion Igual CUERPO P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERACION ::= Identificador Asignacion Igual Parentesis_a CUERPO Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTROL_DATOS ::= Output Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROL_DATOS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTROL_DATOS ::= Input Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTROL_DATOS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CABEZA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CABEZA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CABEZA ::= CABEZA Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CABEZA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CABEZA ::= CABEZA Identificador Coma Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CABEZA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= CABEZA Asignacion TD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= CONTROL_DATOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA CONTROL_DATOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= REPEAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA REPEAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= UNTIL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA UNTIL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCION ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCION ::= FUNCION OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCION ::= CONTROL_DATOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCION ::= FUNCION CONTROL_DATOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VARIABLES ::= DECLARACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VARIABLES ::= VARIABLES DECLARACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Program Identificador P_coma Var VARIABLES Begin SENTENCIA End 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

